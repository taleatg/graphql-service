type Artist {
    id: ID!
    firstName: String
    secondName: String
    middleName: String
    birthDate: String
    birthPlace: String
    country: String
    bands: [Band]
    instruments: [String]
}

input ArtistsInput {
    firstName: String
    secondName: String
    middleName: String
    birthDate: String
    birthPlace: String
    country: String
    bands: [BandInput]
    instruments: String
}

input CreateArtistInput {
    firstName: String
    secondName: String
    middleName: String
    birthDate: String
    birthPlace: String
    country: String
    bands: [BandInput]
    instruments: String
}

input UpdateArtistInput {
    id: ID!
    firstName: String
    secondName: String
    middleName: String
    birthDate: String
    birthPlace: String
    country: String
    bands: [BandInput]
    instruments: String
}

type Query {
    artists(limit: Int, offset: Int): [Artist]
    artist(id: ID!): Artist
}

type Mutation {
  createArtist(createArtistInput: CreateArtistInput): Artist!
  updateArtist(updateArtistInput: UpdateArtistInput): Artist!
  deleteArtist(id: ID!): Delete
}
